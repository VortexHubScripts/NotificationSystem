--// Load the Notification UI Library
local fnl = (function()
    --[[
-- = Enhanced Notification Library v2 = --
Modern, animated notification system with glassmorphic design
]]--

local lib = {}
local TweenService = game:GetService("TweenService")

local Converted = {
	["_focat's notification lib"] = Instance.new("ScreenGui");
	["_Notifications"] = Instance.new("Frame");
	["_Template"] = Instance.new("Frame");
	["_UICorner"] = Instance.new("UICorner");
	["_Title"] = Instance.new("TextLabel");
	["_Description"] = Instance.new("TextLabel");
	["_Icon"] = Instance.new("ImageButton");
	["_IconCorner"] = Instance.new("UICorner");
	["_UIStroke"] = Instance.new("UIStroke");
	["_UIListLayout"] = Instance.new("UIListLayout");
	["_Accent"] = Instance.new("Frame");
	["_AccentCorner"] = Instance.new("UICorner");
	["_Glow"] = Instance.new("ImageLabel");
	["_ProgressBar"] = Instance.new("Frame");
	["_ProgressFill"] = Instance.new("Frame");
	["_ProgressCorner"] = Instance.new("UICorner");
}

function HideUi(uiElement)
	if gethui then
		uiElement.Parent = gethui()
		return true
	end
	if (syn and syn.protect_gui) then
		syn.protect_gui(uiElement)
		uiElement.Parent = game:GetService("CoreGui")
		return true
	end
	return false
end

function RandomString(len)
	if not len then len = 50 end
	local sets = { { 97, 122 }, { 65, 90 }, { 48, 57 } }
	local str = ""
	for i = 1, len do
		math.randomseed(os.clock() ^ 5)
		local charset = sets[math.random(1, #sets)]
		str = str .. string.char(math.random(charset[1], charset[2]))
	end
	return str
end

-- Properties:
Converted["_focat's notification lib"].DisplayOrder = 999999999
Converted["_focat's notification lib"].ResetOnSpawn = false
Converted["_focat's notification lib"].ZIndexBehavior = Enum.ZIndexBehavior.Sibling
Converted["_focat's notification lib"].Name = RandomString(32)
HideUi(Converted["_focat's notification lib"])

Converted["_Notifications"].AnchorPoint = Vector2.new(1, 1)
Converted["_Notifications"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Notifications"].BackgroundTransparency = 1
Converted["_Notifications"].BorderSizePixel = 0
Converted["_Notifications"].ClipsDescendants = false
Converted["_Notifications"].Position = UDim2.new(1, -25, 1, -25)
Converted["_Notifications"].Size = UDim2.new(0, 340, 0, 600)
Converted["_Notifications"].Name = "Notifications"
Converted["_Notifications"].Parent = Converted["_focat's notification lib"]

-- Enhanced Template with glassmorphic design
Converted["_Template"].AnchorPoint = Vector2.new(0.5, 0.5)
Converted["_Template"].BackgroundColor3 = Color3.fromRGB(20, 20, 24)
Converted["_Template"].BackgroundTransparency = 0.15
Converted["_Template"].BorderSizePixel = 0
Converted["_Template"].Position = UDim2.new(0.5, 0, 0.915000021, 0)
Converted["_Template"].Size = UDim2.new(0, 340, 0, 100)
Converted["_Template"].Visible = false
Converted["_Template"].ZIndex = 100
Converted["_Template"].Name = "Template"
Converted["_Template"].Parent = Converted["_Notifications"]

Converted["_UICorner"].CornerRadius = UDim.new(0, 14)
Converted["_UICorner"].Parent = Converted["_Template"]

-- Glow effect
Converted["_Glow"].Image = "rbxassetid://5028857084"
Converted["_Glow"].ImageColor3 = Color3.fromRGB(88, 101, 242)
Converted["_Glow"].ImageTransparency = 0.7
Converted["_Glow"].ScaleType = Enum.ScaleType.Slice
Converted["_Glow"].SliceCenter = Rect.new(24, 24, 276, 276)
Converted["_Glow"].AnchorPoint = Vector2.new(0.5, 0.5)
Converted["_Glow"].BackgroundTransparency = 1
Converted["_Glow"].Position = UDim2.new(0.5, 0, 0.5, 0)
Converted["_Glow"].Size = UDim2.new(1, 40, 1, 40)
Converted["_Glow"].ZIndex = 99
Converted["_Glow"].Name = "Glow"
Converted["_Glow"].Parent = Converted["_Template"]

-- Animated accent bar
Converted["_Accent"].AnchorPoint = Vector2.new(0, 0.5)
Converted["_Accent"].BackgroundColor3 = Color3.fromRGB(88, 101, 242)
Converted["_Accent"].BorderSizePixel = 0
Converted["_Accent"].Position = UDim2.new(0, 0, 0.5, 0)
Converted["_Accent"].Size = UDim2.new(0, 5, 0, 0)
Converted["_Accent"].ZIndex = 102
Converted["_Accent"].Name = "Accent"
Converted["_Accent"].Parent = Converted["_Template"]

Converted["_AccentCorner"].CornerRadius = UDim.new(0, 14)
Converted["_AccentCorner"].Parent = Converted["_Accent"]

-- Progress bar container
Converted["_ProgressBar"].AnchorPoint = Vector2.new(0.5, 1)
Converted["_ProgressBar"].BackgroundColor3 = Color3.fromRGB(40, 40, 45)
Converted["_ProgressBar"].BackgroundTransparency = 0.3
Converted["_ProgressBar"].BorderSizePixel = 0
Converted["_ProgressBar"].Position = UDim2.new(0.5, 0, 1, 0)
Converted["_ProgressBar"].Size = UDim2.new(1, 0, 0, 3)
Converted["_ProgressBar"].ZIndex = 103
Converted["_ProgressBar"].Name = "ProgressBar"
Converted["_ProgressBar"].Parent = Converted["_Template"]

-- Progress fill
Converted["_ProgressFill"].AnchorPoint = Vector2.new(0, 0)
Converted["_ProgressFill"].BackgroundColor3 = Color3.fromRGB(88, 101, 242)
Converted["_ProgressFill"].BorderSizePixel = 0
Converted["_ProgressFill"].Position = UDim2.new(0, 0, 0, 0)
Converted["_ProgressFill"].Size = UDim2.new(1, 0, 1, 0)
Converted["_ProgressFill"].ZIndex = 104
Converted["_ProgressFill"].Name = "ProgressFill"
Converted["_ProgressFill"].Parent = Converted["_ProgressBar"]

Converted["_ProgressCorner"].CornerRadius = UDim.new(0, 14)
Converted["_ProgressCorner"].Parent = Converted["_ProgressBar"]

Converted["_Title"].Font = Enum.Font.GothamBold
Converted["_Title"].Text = "Notification"
Converted["_Title"].TextColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Title"].TextSize = 16
Converted["_Title"].TextWrapped = true
Converted["_Title"].TextXAlignment = Enum.TextXAlignment.Left
Converted["_Title"].AnchorPoint = Vector2.new(0, 0)
Converted["_Title"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Title"].BackgroundTransparency = 1
Converted["_Title"].BorderSizePixel = 0
Converted["_Title"].Position = UDim2.new(0, 62, 0, 18)
Converted["_Title"].Size = UDim2.new(1, -78, 0, 20)
Converted["_Title"].ZIndex = 105
Converted["_Title"].Name = "Title"
Converted["_Title"].Parent = Converted["_Template"]

Converted["_Description"].Font = Enum.Font.Gotham
Converted["_Description"].Text = "This is your notification message"
Converted["_Description"].TextColor3 = Color3.fromRGB(220, 220, 225)
Converted["_Description"].TextSize = 14
Converted["_Description"].TextTransparency = 0.2
Converted["_Description"].TextWrapped = true
Converted["_Description"].TextXAlignment = Enum.TextXAlignment.Left
Converted["_Description"].TextYAlignment = Enum.TextYAlignment.Top
Converted["_Description"].AnchorPoint = Vector2.new(0, 0)
Converted["_Description"].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Description"].BackgroundTransparency = 1
Converted["_Description"].BorderSizePixel = 0
Converted["_Description"].Position = UDim2.new(0, 62, 0, 43)
Converted["_Description"].Size = UDim2.new(1, -78, 0, 42)
Converted["_Description"].ZIndex = 105
Converted["_Description"].Name = "Description"
Converted["_Description"].Parent = Converted["_Template"]

-- Icon with background
Converted["_Icon"].Image = "rbxassetid://7072706001"
Converted["_Icon"].ImageColor3 = Color3.fromRGB(255, 255, 255)
Converted["_Icon"].AnchorPoint = Vector2.new(0.5, 0.5)
Converted["_Icon"].BackgroundColor3 = Color3.fromRGB(88, 101, 242)
Converted["_Icon"].BackgroundTransparency = 0.1
Converted["_Icon"].BorderSizePixel = 0
Converted["_Icon"].Position = UDim2.new(0, 32, 0.5, -2)
Converted["_Icon"].Size = UDim2.new(0, 36, 0, 36)
Converted["_Icon"].ZIndex = 105
Converted["_Icon"].Name = "Icon"
Converted["_Icon"].Parent = Converted["_Template"]

Converted["_IconCorner"].CornerRadius = UDim.new(0, 10)
Converted["_IconCorner"].Parent = Converted["_Icon"]

Converted["_UIStroke"].Color = Color3.fromRGB(80, 80, 90)
Converted["_UIStroke"].Thickness = 1.5
Converted["_UIStroke"].Transparency = 0.4
Converted["_UIStroke"].Parent = Converted["_Template"]

Converted["_UIListLayout"].Padding = UDim.new(0, 10)
Converted["_UIListLayout"].HorizontalAlignment = Enum.HorizontalAlignment.Right
Converted["_UIListLayout"].SortOrder = Enum.SortOrder.LayoutOrder
Converted["_UIListLayout"].VerticalAlignment = Enum.VerticalAlignment.Bottom
Converted["_UIListLayout"].Parent = Converted["_Notifications"]

baseNotif = Converted["_Template"]

-- Enhanced animation function
function animateNotification(notif, duration, dir)
	dir = dir or "in"
	
	if dir == "in" then
		-- Initial state
		notif.Position = UDim2.new(1.5, 0, notif.Position.Y.Scale, notif.Position.Y.Offset)
		notif.BackgroundTransparency = 1
		notif.Size = UDim2.new(0, 300, 0, 100)
		notif.Rotation = 3
		
		-- Animate entrance
		local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
		
		TweenService:Create(notif, tweenInfo, {
			Position = UDim2.new(0.5, 0, notif.Position.Y.Scale, notif.Position.Y.Offset),
			BackgroundTransparency = 0.15,
			Size = UDim2.new(0, 340, 0, 100),
			Rotation = 0
		}):Play()
		
		-- Animate accent bar
		local accent = notif:FindFirstChild("Accent")
		if accent then
			local accentTween = TweenService:Create(accent, TweenInfo.new(0.6, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {
				Size = UDim2.new(0, 5, 1, -8)
			})
			task.delay(0.1, function() accentTween:Play() end)
		end
		
		-- Animate icon
		local icon = notif:FindFirstChild("Icon")
		if icon then
			icon.Size = UDim2.new(0, 0, 0, 0)
			icon.Rotation = -90
			local iconTween = TweenService:Create(icon, TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
				Size = UDim2.new(0, 36, 0, 36),
				Rotation = 0
			})
			task.delay(0.15, function() iconTween:Play() end)
		end
		
		-- Fade in text
		local title = notif:FindFirstChild("Title")
		local desc = notif:FindFirstChild("Description")
		if title then
			title.TextTransparency = 1
			TweenService:Create(title, TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
				TextTransparency = 0
			}):Play()
		end
		if desc then
			desc.TextTransparency = 1
			local descTween = TweenService:Create(desc, TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
				TextTransparency = 0.2
			})
			task.delay(0.1, function() descTween:Play() end)
		end
		
		-- Progress bar animation
		local progressFill = notif:FindFirstChild("ProgressBar") and notif.ProgressBar:FindFirstChild("ProgressFill")
		if progressFill and duration then
			task.delay(0.5, function()
				TweenService:Create(progressFill, TweenInfo.new(duration, Enum.EasingStyle.Linear), {
					Size = UDim2.new(0, 0, 1, 0)
				}):Play()
			end)
		end
		
	else
		-- Exit animation
		local tweenInfo = TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.In)
		
		TweenService:Create(notif, tweenInfo, {
			Position = UDim2.new(1.5, 0, notif.Position.Y.Scale, notif.Position.Y.Offset),
			BackgroundTransparency = 1,
			Size = UDim2.new(0, 300, 0, 100),
			Rotation = -5
		}):Play()
		
		-- Fade out all elements
		for _, element in pairs(notif:GetDescendants()) do
			if element:IsA("TextLabel") then
				TweenService:Create(element, tweenInfo, {
					TextTransparency = 1
				}):Play()
			elseif element:IsA("ImageLabel") or element:IsA("ImageButton") then
				TweenService:Create(element, tweenInfo, {
					ImageTransparency = 1,
					BackgroundTransparency = 1
				}):Play()
			elseif element:IsA("UIStroke") then
				TweenService:Create(element, tweenInfo, {
					Transparency = 1
				}):Play()
			elseif element:IsA("Frame") and element.Name ~= "Template" then
				TweenService:Create(element, tweenInfo, {
					BackgroundTransparency = 1
				}):Play()
			end
		end
	end
end

-- Track notification order
local notificationOrder = 0

function lib:MakeNotification(nt)
	nt = nt or { Title = "Notification", Text = "This is a test notification.", Duration = 5 }

	local holder = Converted["_Notifications"]
	
	notificationOrder = notificationOrder + 1

	-- Collect existing notifications
	local existingNotifs = {}
	for _, child in ipairs(holder:GetChildren()) do
		if child:IsA("Frame") and child.Visible and child.Name == "EnhancedNotification" then
			table.insert(existingNotifs, child)
		end
	end
	
	table.sort(existingNotifs, function(a, b)
		return a.LayoutOrder < b.LayoutOrder
	end)

	-- Remove oldest if limit reached
	if #existingNotifs >= 5 then
		local oldest = existingNotifs[1]
		task.spawn(function()
			animateNotification(oldest, nil, "out")
			task.wait(0.4)
			oldest:Destroy()
		end)
	end

	-- Create new notification
	local newNotif = baseNotif:Clone()
	newNotif.Parent = holder
	newNotif.Title.Text = nt.Title
	newNotif.Description.Text = nt.Text
	newNotif.Visible = true
	newNotif.Name = "EnhancedNotification"
	newNotif.LayoutOrder = notificationOrder
	newNotif.Position = UDim2.new(0.5, 0, 0, 0)

	-- Play entrance animation
	animateNotification(newNotif, nt.Duration, "in")

	-- Auto-dismiss
	task.delay(nt.Duration, function()
		if newNotif.Parent then
			animateNotification(newNotif, nil, "out")
			task.wait(0.4)
			if newNotif.Parent then
				newNotif:Destroy()
			end
		end
	end)
end

return lib
end)()

--// FIXED: Expose fnl and notify globally so they persist
getgenv().fnl = fnl
_G.fnl = fnl

--// Create a Simple Notification Function
getgenv().notify = function(title, text, duration)
    title = title or "Notification"
    text = text or "No message."
    duration = duration or 5

    if fnl and fnl.MakeNotification then
        fnl:MakeNotification({
            Title = title,
            Text = text,
            Duration = duration
        })
    else
        warn("Notification library failed to load.")
    end
end

_G.notify = getgenv().notify

--[[ Example Usage
notify("Success!", "Operation completed successfully", 4)
task.wait(1)
notify("Warning", "This is a warning message", 5)
task.wait(1)
notify("Info", "Here's some information for you", 4)
task.wait(1)
notify("Alert", "Something requires your attention", 6)
--]]
